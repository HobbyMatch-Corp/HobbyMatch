@page "/Events/{Filter?}"
@using HobbyMatch.App.Services.Events
@using HobbyMatch.BL.DTOs.Events
@using HobbyMatch.Domain.Entities
@using HobbyMatch.App.Components.Components
@inject IEventApiService EventApiService


@if (IsLoading)
{
<div class="d-flex justify-content-center">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
}
else
{
    <MudContainer Class="mt-4">
        @if (FilteredEvents == null)
        {
            <MudPaper Elevation="0" Class="pa-4 mud-background-gray">
                <MudText>
                     Error occured while fetching events @(string.IsNullOrEmpty(Filter) ? "" : $"matching '{Filter}'").
                </MudText>
            </MudPaper>
        }
        else if (FilteredEvents.Count == 0)
        {
            <MudPaper Elevation="0" Class="pa-4 mud-background-gray">
                <MudText>
                    No events found @(string.IsNullOrEmpty(Filter) ? "" : $"matching '{Filter}'").
                </MudText>
            </MudPaper>
        }
        else
        {
            <MudText Typo="Typo.h4" Class="mb-4">Events @(string.IsNullOrEmpty(Filter) ? "" : $"matching '{Filter}'")</MudText>
            <MudGrid>
                @foreach (var eventItem in FilteredEvents)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <EventCard Event="@eventItem"/>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudContainer>
}

@code
{
    [Parameter] public string? Filter { get; set; }
    
    List<EventOverviewDto>? FilteredEvents { get; set; }
    bool IsLoading { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        FilteredEvents = await EventApiService.GetFilteredEvents(Filter);
        IsLoading = false;
    }
}
@page "/Events/{Filter?}"
@using HobbyMatch.App.Services.Events
@using HobbyMatch.BL.DTOs.Event
@using HobbyMatch.Domain.Entities
@inject IEventApiService EventApiService


@if (IsLoading)
{
<div class="d-flex justify-content-center">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
}
else
{
    <MudContainer Class="mt-4">
        @if (FilteredEvents == null)
        {
            <MudPaper Elevation="0" Class="pa-4 mud-background-gray">
                <MudText>
                     Error occured while fetching events @(string.IsNullOrEmpty(Filter) ? "" : $"matching '{Filter}'").
                </MudText>
            </MudPaper>
        }
        else if (FilteredEvents.Count == 0)
        {
            <MudPaper Elevation="0" Class="pa-4 mud-background-gray">
                <MudText>
                    No events found @(string.IsNullOrEmpty(Filter) ? "" : $"matching '{Filter}'").
                </MudText>
            </MudPaper>
        }
        else
        {
            <MudText Typo="Typo.h4" Class="mb-4">Events @(string.IsNullOrEmpty(Filter) ? "" : $"matching '{Filter}'")</MudText>
            <MudGrid>
                @foreach (var eventItem in FilteredEvents)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Elevation="2" Class="h-100">
                            <MudCardContent>
                                <MudText Typo="Typo.h5">@eventItem.Name</MudText>
                                <MudText Typo="Typo.body2" Class="mt-2">
                                    <MudText Typo="Typo.subtitle2" Class="d-inline">When: </MudText>
                                    @eventItem.StartTime.ToString("MMM dd, yyyy - h:mm tt") to
                                    @(eventItem.StartTime.Date == eventItem.EndTime.Date
                                        ? eventItem.EndTime.ToString("h:mm tt")
                                        : eventItem.EndTime.ToString("MMM dd, yyyy - h:mm tt"))
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mt-1">
                                    <MudText Typo="Typo.subtitle2" Class="d-inline">Price: </MudText>
                                    @(eventItem.Price == 0 ? "Free" : $"${eventItem.Price:F2}")
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mt-1">
                                    <MudText Typo="Typo.subtitle2" Class="d-inline">Organizer: </MudText>
                                    @eventItem.OrganizerName
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mt-1">
                                    <MudText Typo="Typo.subtitle2" Class="d-inline">Location: </MudText>
                                    Lat: @eventItem.Location.Latitude, Long: @eventItem.Location.Longitude
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mt-2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">
                                    @eventItem.Description
                                </MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           OnClick="@(() => ViewEventDetails(eventItem.Id))">
                                    View Details
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudContainer>
}

@code
{
    [Parameter] public string? Filter { get; set; }
    
    List<EventDto>? FilteredEvents { get; set; }
    bool IsLoading { get; set; } = true;
    private void ViewEventDetails(int eventId)
    {
        // Navigation.NavigateTo($"/event-details/{eventId}");

        Console.WriteLine($"Viewing details for event {eventId}");
    }

    protected override async Task OnInitializedAsync()
    {
        FilteredEvents = await EventApiService.GetFilteredEvents(Filter);
        IsLoading = false;
    }
}
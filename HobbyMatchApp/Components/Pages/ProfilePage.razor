@page "/profile"
@rendermode InteractiveServer
@inject AuthenticationStateProvider authenticationStateProvider
@inject IOrganizerApiService organizerApiService
@inject IVenueApiService venueApiService
@inject IHobbyApiService hobbyApiService
@inject NavigationManager navigationManager
@inject ISnackbar _snackbar
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using HobbyMatch.App.Components.Components
@using HobbyMatch.App.Services.Api
@using HobbyMatch.App.Services.Hobbies
@using HobbyMatch.App.Services.Venues
@using HobbyMatch.BL.DTOs.Organizers
@using HobbyMatch.BL.DTOs.Hobbies
@using HobbyMatch.BL.DTOs.Venues
@using HobbyMatch.BL.Services.AppUsers
@using HobbyMatch.Domain.Entities
@using HobbyMatch.App.Auth.CustomAuthStateProvider
@using HobbyMatch.Domain.Enums
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<MudContainer Class="d-flex" Style="justify-content: center" MaxWidth="MaxWidth.Medium">

    <MudPaper Class="px-4" MinWidth="400px">
        <MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Secondary" style="margin-bottom:16px">My Profile</MudText>
        <MudForm @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="@(!editable)">
            <MudTextField @ref="usernameField" T="string" Label="Username" Required="editable"
            RequiredError="User name is required!" Style="margin-bottom:8px" @bind-Value="formModel.UserName" />
            <MudTextField @ref="emailField" T="string" Label="Email" Required="editable" RequiredError="Email is required!" @bind-Value="formModel.Email"
            Immediate="true" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" Style="margin-bottom:8px" />
            @if (userType != null && userType.Value == UserType.BussinessClient)
            {
                <MudTextField @ref="taxIdField" T="string" Label="TaxId" Required="true" RequiredError="Tax ID is required!" style="margin-bottom:8px" @bind-Value="formModel.TaxId" />
            }
            <di style="margin-bottom:8px">
                @if (userType != null && userType.Value == UserType.User)
                {
                    @if (!editable)
                    {
                        <HobbiesChips Hobbbies="@((user as UserDto).Hobbies.ToList())" />
                    }
                    else
                    {
                        <HobbyMatch.App.Components.Components.HobbiesList @ref="hobbiesList"
                        Hobbies="hobbies" InitialSelectedHobbies="initialHobbies" ReadOnly="@(!editable)" />
                    }

                }
                else
                {
                    <div class="d-flex align-center justify-center mb-2" style="margin:8px">
                    <button Type="button" Class="btn btn-primary" @onclick="CreateVenue">Create venue</button>
                </div>  
                }
            </di>
            @* <div class="d-flex"> *@
            @* 	<MudRadioGroup @ref="accountType" T="string" Required="true" RequiredError="Account type is required!" Style="margin-bottom:8px" Disabled=true> *@
            @* 		<MudRadio Color="Color.Primary" Value="@("User")">User</MudRadio> *@
            @* 		<MudRadio Color="Color.Primary" Value="@("BusinessClient")">Business Client</MudRadio> *@
            @* 	</MudRadioGroup> *@
            @* </div> *@
            <div class="d-flex align-center justify-center mb-2">
                @if (!editable)
                {
                    <button Type="button" Class="btn btn-primary" @onclick="ToggleEdit">Edit</button>

                }
                else
                {
                    <button Type="button" Class="btn btn-primary" @onclick="SaveAction">Save changes</button>
                }
            </div>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    bool success;
    bool editable = false;
    string[] errors = { };
    string _userId;
    private UserFormModel formModel = new();
    OrganizerDto? user;
    UserType? userType = null;

    MudTextField<string>? usernameField;
    MudTextField<string>? emailField;
    MudTextField<string>? taxIdField;

    private ClaimsPrincipal? userClaimsPrincipal;

    private HobbiesList? hobbiesList;
    private List<HobbyDto> hobbies { get; set; } = new();
    private List<HobbyDto> initialHobbies { get; set; } = new();

    private List<ClientsVenueDto> _venuesList { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1);
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            userClaimsPrincipal = authState.User;
            if (userClaimsPrincipal.Identity is { IsAuthenticated: true })
            {
                if (Enum.TryParse(userClaimsPrincipal.FindFirst(ClaimTypes.Role)?.Value, out UserType userType))
                {
                    this.userType = userType;
                    await LoadData();
                }
                else
                {
                    navigationManager.NavigateTo("/error");
                }
            }
            else
            {
                navigationManager.NavigateTo("/error");
            }
            hobbies = (await hobbyApiService.GetHobbiesAsync()).ToList();

            StateHasChanged();
            base.OnAfterRender(firstRender);
        }
    }

    private async Task LoadData()
    {
        if (userType != null)
        {
            var email = "";
            if (userType == UserType.User)
            {
                user = await organizerApiService.GetMe<UserDto>();
                email = (user as UserDto)?.Email;
            }
            else if (userType == UserType.BussinessClient)
            {
                user = await organizerApiService.GetMe<BusinessClientDto>();
                //_venuesList = await 
                email = (user as BusinessClientDto)?.Email;
            }

            if (user is not null)
            {
                _userId = user.Id;
                formModel = new UserFormModel
                    {
                        UserName = user.Name,
                        Email = email,
                    };
                if (userType is not null && userType == UserType.BussinessClient)
                {
                    formModel.AccountType = "BusinessClient";
                    formModel.TaxId = ((BusinessClientDto)user).taxId;
                }
                else
                {
                    formModel.AccountType = "User";
                    initialHobbies = ((UserDto)user).Hobbies.ToList();
                }
            }

        }
    }

    private void ToggleEdit()
    {
        editable = !editable;
    }

    private async Task SaveAction()
    {
        if (userType == UserType.User)
        {
            var hobbyDtos = hobbiesList?.SelectedHobbies.ToArray() ?? [];
            var updatedUser = new UpdateUserDto(user.Id.ToString(), formModel.UserName, formModel.Email, hobbyDtos);

            if (await organizerApiService.UpdateUserAsync<UserDto, UpdateUserDto>(_userId, updatedUser))
            {
                _snackbar.Add("Saved changes", Severity.Success);
                await LoadData();
            }
            else
            {
                _snackbar.Add("ERROR: Couldn't save changes", Severity.Error);
            }
        }
        else if (userType == UserType.BussinessClient && formModel.TaxId != null)
        {
            var updatedBusinessClient = new UpdateBusinessClientDto(formModel.UserName, formModel.Email, formModel.TaxId);
            if (await organizerApiService.UpdateUserAsync<BusinessClientDto, UpdateBusinessClientDto>(_userId, updatedBusinessClient))
            {
                _snackbar.Add("Saved changes", Severity.Success);
                await LoadData();
            }
            else
            {
                _snackbar.Add("ERROR: Couldn't save changes", Severity.Error);
            }
        }

        await LoadData();
        ToggleEdit();
    }

    private void CreateVenue() =>
        navigationManager.NavigateTo("/create-venue");

    public class UserFormModel
    {
        public string? Id { get; set; }
        public string? UserName { get; set; }
        public string? Email { get; set; }
        public string? TaxId { get; set; }
        public string? AccountType { get; set; }
    }
}

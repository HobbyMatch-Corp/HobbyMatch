@page "/home"

@using HobbyMatch.App.Auth.CustomAuthStateProvider
@using HobbyMatch.App.Auth.TokenService
@using HobbyMatch.App.Components.Components
@using HobbyMatch.App.Services.Api
@using HobbyMatch.App.Services.Events
@using HobbyMatch.BL.DTOs.Events
@using HobbyMatch.BL.DTOs.Organizers
@using HobbyMatch.Domain.Entities
@using HobbyMatch.App.Components.Layout;
@using System.Security.Claims
@using HobbyMatch.Domain.Enums
@using System.IdentityModel.Tokens.Jwt

@inject IEventApiService EventApiService
@inject IOrganizerApiService OrganizerApiService
@inject ITokenService TokenService
@inject NavigationManager navigationManager
@inject CustomAuthStateProvider customAuthStateProvider

<PageTitle>Home</PageTitle>

<MudThemeProvider Theme="MyCustomTheme" />

<MudText Typo="Typo.h1" Color="Color.Primary">Welcome, @(UserName)!</MudText>

<MudGrid>
	<MudItem xs="12" md="8">
		<UpcomingEventsCard UpcomingEventsList="@UpcomingEventsList" />
	</MudItem>

	<MudItem xs="12" md="4">
		<MudGrid>
			<MudItem xs="12">
				<UserCard Username="@UserName" Email="@Email" TaxId="@TaxId"
				SignedUpEventCount="@EventsSignedUp" OrganizedEventCount="@EventsOrganized" SponsoredEventCount="@EventsSponsored" />
			</MudItem>
			<MudItem xs="12">
				<CreateEventShortcutCard />
			</MudItem>
		</MudGrid>
	</MudItem>
</MudGrid>


@code {
	MudTheme MyCustomTheme = new CustomTheme();

	public string? UserName { get; set; }
	public string? Email { get; set; }
	public string? TaxId { get; set; }
	public int? EventsSignedUp { get; set; }
	public int? EventsSponsored { get; set; }
	public int? EventsOrganized { get; set; }
	public List<EventDto>? UpcomingEventsList { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstrender)
	{
		if (firstrender)
		{
			MyCustomTheme.PaletteLight.Background = new MudBlazor.Utilities.MudColor("#F5F5F5");
			var claims = TokenService.GetClaimsFromToken();
			if (!claims.Any())
				return;
			if (!int.TryParse(claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out int orgId))
				return;
			var userType = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

			if (userType == UserType.User.ToString())
			{
				UserDto? user = await OrganizerApiService.GetUserAsync<UserDto>(orgId);
				UserName = user?.Name;
				Email = user?.Email;


				UpcomingEventsList = await EventApiService.GetSignedUpEventsAsync() ?? new List<EventDto>();
				EventsSignedUp = UpcomingEventsList.Count;
			}
			else if (userType == UserType.BussinessClient.ToString())
			{
				BusinessClientDto? bc = await OrganizerApiService.GetUserAsync<BusinessClientDto>(orgId);
				UserName = bc?.Name;
				Email = bc?.Email;
				TaxId = bc?.taxId;

				UpcomingEventsList = await EventApiService.GetSponsoredEventsAsync() ?? new List<EventDto>();
				EventsSponsored = UpcomingEventsList.Count;
			}
			else
			{
				return;
			}
			EventsOrganized = (await EventApiService.GetOrganizedEventsAsync() ?? new List<EventDto>()).Count;
			StateHasChanged();
		}
	}
}


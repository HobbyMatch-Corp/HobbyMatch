@page "/home"

@using HobbyMatch.App.Auth.TokenService
@using HobbyMatch.App.Components.Components
@using HobbyMatch.App.Services.Api
@using HobbyMatch.App.Services.Events
@using HobbyMatch.BL.DTOs.Event
@using HobbyMatch.Domain.Entities
@using HobbyMatch.App.Components.Layout;
@using System.Security.Claims
@using HobbyMatch.Domain.Enums
@using System.IdentityModel.Tokens.Jwt

@inject IEventApiService EventApiService
@inject IOrganizerApiService OrganizerApiService
@inject ITokenService TokenService

<PageTitle>Home</PageTitle>

<MudThemeProvider Theme="MyCustomTheme" />

<MudText Typo="Typo.h1" Color="Color.Primary">Welcome, @(UserName)!</MudText>

<MudGrid>
    <MudItem xs="12" md="8">
        <UpcomingEventsCard UpcomingEventsList="@UpcomingEventsList" />
    </MudItem>

    <MudItem xs="12" md="4">
        <MudGrid>
            <MudItem xs="12">
                <UserCard Username="@UserName" Email="@Email" TaxId="@TaxId"
                SignedUpEventCount="@EventsSignedUp" OrganizedEventCount="@EventsOrganized" SponsoredEventCount="@EventsSponsored" />
            </MudItem>
            <MudItem xs="12">
                <CreateEventShortcutCard />
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>


@code {
    MudTheme MyCustomTheme = new CustomTheme();

    public string? UserName { get; set; }
    public string? Email { get; set; }
    public string? TaxId { get; set; }
    public int? EventsSignedUp { get; set; }
    public int? EventsSponsored { get; set; }
    public int? EventsOrganized { get; set; }
    public List<EventDto>? UpcomingEventsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MyCustomTheme.PaletteLight.Background = new MudBlazor.Utilities.MudColor("#F5F5F5");

        var claims = TokenService.GetClaimsFromToken();
        int.TryParse(claims.First(c => c.Type == JwtRegisteredClaimNames.Sub).Value, out int orgId);
        var userType = claims.First(c => c.Type == "userType").Value;

        if (userType == UserType.User.ToString())
        {
            User? user = await OrganizerApiService.GetUserAsync<User>(orgId);
            UserName = user?.UserName;
            Email = user?.Email;


            UpcomingEventsList = await EventApiService.GetSignedUpEventsAsync() ?? new List<EventDto>();
            EventsSignedUp = UpcomingEventsList.Count;
        }
        else
        {
            BusinessClient? bc = await OrganizerApiService.GetUserAsync<BusinessClient>(orgId);
            UserName = bc?.UserName;
            Email = bc?.Email;
            TaxId = bc?.TaxID;

            UpcomingEventsList = await EventApiService.GetSponsoredEventsAsync() ?? new List<EventDto>();
            EventsSponsored = UpcomingEventsList.Count;
        }

        EventsOrganized = (await EventApiService.GetOrganizedEventsAsync() ?? new List<EventDto>()).Count;
    }
}


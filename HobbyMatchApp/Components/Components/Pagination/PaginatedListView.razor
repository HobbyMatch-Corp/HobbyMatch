@using HobbyMatch.App.Pagination
@typeparam TItem

@if (_handler.IsLoading)
{
    <p>Loading...</p>
}
else if (_handler.Data.Any())
{
    @foreach (var item in _handler.Data)
    {
        @_itemTemplate(item)
    }

    <div>
        <button class="btn btn-primary" @onclick="PreviousAsync" disabled="@(_handler.CurrentPage == 1)">Previous</button>
        <span>Page @_handler.CurrentPage of @_handler.TotalPages</span>
        <button class="btn btn-primary" @onclick="NextAsync" disabled="@(_handler.CurrentPage == _handler.TotalPages)">Next</button>
    </div>
}
else
{
    <p>No items found.</p>
}

@code {
    [Parameter] public RenderFragment<TItem>? ItemTemplate { get; set; }
    [Parameter] public PaginatedQueryHandler<TItem>? Handler { get; set; }

    private PaginatedQueryHandler<TItem> _handler = default!;
    private RenderFragment<TItem> _itemTemplate = default!;

    protected override async Task OnInitializedAsync()
    {
        if (Handler == null || ItemTemplate == null)
        {
            throw new InvalidOperationException("Handler and item template must be provided");
        }

        _handler = Handler;
        _itemTemplate = ItemTemplate;

        await Handler.LoadPageAsync(1);
    }

    private async Task PreviousAsync()
    {
        await _handler.LoadPreviousPageAsync();
    }

    private async Task NextAsync()
    {
        await _handler.LoadNextPageAsync();
    }

}
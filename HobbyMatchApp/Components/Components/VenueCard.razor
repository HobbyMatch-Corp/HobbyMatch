@inject IOrganizerApiService organizerApiService
@inject AuthenticationStateProvider authenticationStateProvider
@inject IOrganizerApiService organizerApiService
@inject NavigationManager navigationManager
@inject ISnackbar _snackbar
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using HobbyMatch.App.Services.Api
@using HobbyMatch.BL.DTOs.Organizers
@using HobbyMatch.BL.DTOs.Venues
@using HobbyMatch.BL.Services.AppUsers
@using HobbyMatch.Domain.Entities
@using HobbyMatch.App.Auth.CustomAuthStateProvider
@using HobbyMatch.Domain.Enums
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<MudContainer Class="d-flex" Style="justify-content: center" MaxWidth="MaxWidth.Medium">

	<MudPaper Class="px-4" MinWidth="400px">
		<MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Secondary" style="margin-bottom:16px">My Profile</MudText>
		<MudForm @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="@(!editable)">
			@if (userType != null && userType.Value == UserType.BussinessClient)
			{
			<div class="d-flex align-center justify-center mb-2">
				@if (!editable)
				{
					<button Type="button" Class="btn btn-primary" @onclick="ToggleEdit">Edit</button>

				}
				else
				{
					<button Type="button" Class="btn btn-primary" @onclick="SaveAction">Save changes</button>
				}
			</div>
			}
		</MudForm>
	</MudPaper>
</MudContainer>

@code {
	bool success;
	bool editable = false;
	string[] errors = { };
	int _userId = 0;
	private VenueFormModel formModel = new();
	Organizer? user;
	UserType? userType = null;


	private ClaimsPrincipal? currentUser;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await Task.Delay(1);
			var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
			currentUser = authState.User;
			if (currentUser.Identity is { IsAuthenticated: true })
			{
				if (Enum.TryParse(currentUser.FindFirst("userType")?.Value, out UserType userType))
				{
					this.userType = userType;
				}
				else
				{
					navigationManager.NavigateTo("/error");
				}
			}
			else
			{
				navigationManager.NavigateTo("/error");
			}
			StateHasChanged();
			base.OnAfterRender(firstRender);
		}
	}

	private void ToggleEdit()
	{
		editable = !editable;
	}
	private async Task SaveAction()
	{

			//var updateVenueDto = new UpdateVenueDto();

			// if ()
			// {
			// 	_snackbar.Add("Saved changes", Severity.Success);
			// }
			// else
			// {
			// 	_snackbar.Add("ERROR: Couldn't save changes", Severity.Error);
			// }
		ToggleEdit();
	}
	public class VenueFormModel
	{
	}
}
